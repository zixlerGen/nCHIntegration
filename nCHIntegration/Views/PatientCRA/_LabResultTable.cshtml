@model List<nCHIntegration.Models.TbPatientLab>
@{
    var hn = Context.Request.Query["hn"].FirstOrDefault();
    ViewData["Title"] = $"Lab Result - {hn}";
    // ดึงค่าวันที่ปัจจุบันจาก query string หากมีการ filter มาก่อน
    var filterDate = Context.Request.Query["filterDate"].FirstOrDefault();
}

<div class="card shadow-sm mb-4">
    <div class="card-header bg-white">
        <form method="get" asp-controller="PatientCRA" asp-action="GetTbPatientLabDataView">
            <div class="row align-items-end">
                <div class="col-md-3">
                    <label for="filterDate" class="form-label fw-semibold text-muted">Filter by Result Date:</label>
                    <input type="date" id="filterDate" name="filterDate" class="form-control" value="@filterDate" />
                </div>
                <div class="col-md-auto mt-3 mt-md-0">
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-search me-1"></i> Search
                    </button>
                    @if (!string.IsNullOrEmpty(filterDate))
                    {
                        // ปุ่ม Clear Filter จะแสดงเมื่อมีการ Filter
                        <a href="@Url.Action("GetTbPatientLabDataView", "PatientCRA", new { hn = hn })" class="btn btn-outline-secondary ms-2">
                            <i class="bi bi-x-circle me-1"></i> Clear Filter
                        </a>
                    }
                </div>
                <input type="hidden" name="hn" value="@hn" />
            </div>
        </form>
    </div>

    <div class="card-body p-0">
        @if (Model == null || !Model.Any())
        {
            <div class="alert alert-warning m-3" role="alert">
                <i class="bi bi-info-circle-fill"></i> No lab results found.
            </div>
        }
        else
        {
            @Html.AntiForgeryToken()

            <div class="d-flex justify-content-between align-items-center p-3 bg-light border-bottom">
                <h5 class="mb-0 text-dark">
                    <i class="bi bi-bar-chart-line-fill me-2 text-primary"></i> Lab Results (HN: <span class="fw-bold">@hn</span>)
                </h5>
                <button type="button" id="saveSelectedLabsBtn" class="btn btn-success" disabled>
                    <i class="bi bi-floppy-fill me-1"></i> Save Selected Labs
                </button>
            </div>

            <div class="table-responsive">
                <table class="table table-striped table-hover table-sm mb-0" id="labResultTable">
                    <thead class="table-primary">
                        @* เปลี่ยนเป็น table-primary เพื่อให้สีเข้ากับปุ่ม Save *@
                        <tr>
                            <th class="text-center" style="width: 5%;">
                                <input type="checkbox" id="selectAll" class="form-check-input" title="Select All" />
                            </th>
                            <th style="width: 10%;">Lab Code</th>
                            <th style="width: 35%;">Lab Name</th>
                            <th class="text-center" style="width: 15%;">Result</th>
                            <th class="text-center" style="width: 10%;">Unit</th>
                            <th style="width: 15%;">Result Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var lab in Model)
                        {
                            <tr class="lab-row" data-request-no="@lab.Request_No" data-lab-code="@lab.Lab_Code" data-hn="@lab.HN">
                                <td class="text-center">
                                    <input type="checkbox"
                                           class="form-check-input row-checkbox"
                                           name="selectedLabItems"
                                           data-request-no="@lab.Request_No"
                                           data-lab-code="@lab.Lab_Code"
                                           data-hn="@lab.HN"
                                           data-row-id="@(lab.Lab_Code + "_" + lab.Request_No)"
                                           value="@(lab.Lab_Code + "_" + lab.Request_No)" />
                                </td>
                                <td>@lab.Lab_Code</td>
                                <td>@lab.Lab_Name_English</td>
                                <td class="text-center fw-bold text-danger">@lab.Result_Value</td>
                                <td class="text-center text-muted">@lab.Lab_Unit</td>
                                <td>@(lab.Result_Datetime?.ToString("dd/MM/yyyy") ?? "-")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        // ดึงค่า Anti-Forgery Token
        var antiForgeryToken = $('input[name="__RequestVerificationToken"]').val();

        // 🛑 ตัวแปรสำหรับเก็บ URL ของ AJAX (ใช้ @Url.Action หากโค้ดอยู่ใน .cshtml)
        const saveLabsUrl = '@Url.Action("SaveSelectedLabs", "PatientCRA")';

        $(document).ready(function () {
            var $selectAll = $('#selectAll');
            // $rowCheckboxes ถูกใช้เป็นตัวแทนของ selector แต่เราจะใช้ delegation ในการผูก event
            var $saveButton = $('#saveSelectedLabsBtn');

            // ----------------------------------------------------
            // A. Checkbox Handlers (ใช้ Event Delegation เพื่อรองรับ DOM ใหม่)
            // ----------------------------------------------------

            // 3. Enable/Disable Save Button & Update Count (Function นี้คงเดิม)
            function updateSaveButtonState() {
                var checkedCount = $('.row-checkbox:checked:not(:disabled)').length;
                $saveButton.prop('disabled', checkedCount === 0);
                $saveButton.html('<i class="bi bi-floppy-fill me-1"></i> Save Selected Labs (' + checkedCount + ')');
            }

            // 1. Select All / Deselect All (ยังคงผูกโดยตรงได้ เพราะปุ่มนี้คงอยู่)
            $selectAll.on('change', function () {
                // เลือกเฉพาะ Checkbox ที่ยังไม่ได้ถูก disabled (ยังไม่ได้ถูกบันทึก)
                $('.row-checkbox:not(:disabled)').prop('checked', this.checked);
                updateSaveButtonState();
            });

            // 2. Individual Checkbox Change (ใช้ Event Delegation)
            // 🛑 FIX: เปลี่ยนมาใช้ $(document).on('change', ...)
            $(document).on('change', '.row-checkbox', function () {
                var $availableCheckboxes = $('.row-checkbox:not(:disabled)');
                var checkedCount = $availableCheckboxes.filter(':checked').length;

                // อัปเดต Select All
                if (checkedCount === $availableCheckboxes.length && $availableCheckboxes.length > 0) {
                    $selectAll.prop('checked', true);
                } else {
                    $selectAll.prop('checked', false);
                }
                updateSaveButtonState();
            });

            // ----------------------------------------------------
            // B. AJAX Save Handler (แก้ไข Casing และ URL)
            // ----------------------------------------------------

            $saveButton.on('click', function (e) {
                e.preventDefault();

                // 🛑 Debug: ตรวจสอบว่า Event ถูกเรียกใช้หรือไม่
                // console.log('1. Save Button Clicked. Starting data gathering.');

                var selectedData = [];
                var $checkedRows = [];

                // 🛑 FIX 2: ใช้ Selector แบบเดิม เพื่อให้ jQuery หา Checkbox ที่มีอยู่จริงได้
                $('.row-checkbox:checked:not(:disabled)').each(function () {
                    var $checkbox = $(this);
                    // เราสมมติว่า data attributes ทั้งหมดอยู่บน <tr> ที่ครอบ Checkbox
                    var $rowContainer = $checkbox.closest('tr');

                    $checkedRows.push($checkbox);

                    // 🛑 FIX 3: ชื่อ Property ต้องใช้ Casing ให้ตรงกับ C# Model ทุกประการ
                    selectedData.push({
                        // HN เป็น PascalCase
                        HN: String($rowContainer.data('hn')),

                        // request_no และ lab_code เป็น snake_case
                        request_no: String($rowContainer.data('request-no')) || null,
                        lab_code: String($rowContainer.data('lab-code')) || null,

                        // ข้อมูลที่เหลือตาม C# Model
                        lab_name_english: String($rowContainer.data('lab_name_english')) || null,
                        result_value: String($rowContainer.data('result_value')) || null,
                        result_datetime: $rowContainer.data('result_datetime') || null,
                        previous_result_value: String($rowContainer.data('previous_result_value')) || null,
                        previous_result_datetime: $rowContainer.data('previous_result_datetime') || null,
                        lab_unit: String($rowContainer.data('lab_unit')) || null,
                        request_lab_code: String($rowContainer.data('request_lab_code')) || null,
                        request_lab_name_english: String($rowContainer.data('request_lab_name_english')) || null
                    });
                });

                if (selectedData.length === 0) {
                    alert('Please select at least one lab result.');
                    return;
                }

                // A. แสดงสถานะ Loading
                var originalHtml = $saveButton.html();
                $saveButton.prop('disabled', true).html('<span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span> Saving...');

                // 🛑 Debug: ตรวจสอบ Payload ก่อนส่ง
                // console.log('3. JSON Payload:', JSON.stringify(selectedData));

                $.ajax({
                    // 🛑 FIX 4: ใช้ตัวแปร URL ที่ถูกสร้างด้วย @Url.Action
                    url: saveLabsUrl,
                    type: 'POST',
                    contentType: 'application/json',
                    dataType: 'json',
                    data: JSON.stringify(selectedData),
                    headers: {
                        'RequestVerificationToken': antiForgeryToken
                    },
                    success: function (response) {
                        if (response.success) {
                            alert('Success: ' + response.message);
                            $checkedRows.forEach(function ($checkbox) {
                                $checkbox.prop('disabled', true).prop('checked', false).closest('tr').addClass('table-success');
                            });
                            updateSaveButtonState();
                        } else {
                            alert('Error: ' + response.message);
                            $saveButton.prop('disabled', false).html(originalHtml);
                        }
                    },
                    error: function (xhr, status, error) {
                        alert('An unexpected error occurred during save: ' + error + ' Status: ' + xhr.status);
                        $saveButton.prop('disabled', false).html(originalHtml);
                    }
                });
            });

            // Initial state check
            updateSaveButtonState();
        });
    </script>
}